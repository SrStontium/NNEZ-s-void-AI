#include <driver/i2s.h>
#include <WiFi.h>

#define I2S_WS 8
#define I2S_SD 10
#define I2S_SCK 9
#define I2S_PORT I2S_NUM_0
#define bufferLen 128

// 替换为你的WiFi SSID和密码
const char* ssid = "504";
const char* password = "12345678";

// 服务器地址和端口
const char* serverAddress = "180.184.96.142";
const int serverPort = 19896; // 标准端口通常是80或443

// 麦克风音频缓冲区
int16_t sBuffer[bufferLen];

void i2s_install() {
  const i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = 44100,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = 0, // Default interrupt priority
    .dma_buf_count = 8,
    .dma_buf_len = bufferLen,
    .use_apll = false
  };

  esp_err_t err = i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  if (err != ESP_OK) {
    Serial.printf("安装I2S驱动失败: %s\n", esp_err_to_name(err));
  }
}
void i2s_setpin() {
  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = -1,
    .data_in_num = I2S_SD
  };

  esp_err_t err = i2s_set_pin(I2S_PORT, &pin_config);
  if (err != ESP_OK) {
    Serial.printf("设置I2S引脚失败: %s\n", esp_err_to_name(err));
  }
}

void i2s_setpin2() {
  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = -1,
    .data_in_num = I2S_SD2
  };

  esp_err_t err = i2s_set_pin(I2S_PORT, &pin_config);
  if (err != ESP_OK) {
    Serial.printf("设置I2S引脚失败: %s\n", esp_err_to_name(err));
  }
}

void setup() {
  Serial.begin(115200);
  i2s_install(); // 安装并配置I2S驱动
  i2s_setpin();  // 设置I2S引脚
  i2s_start(I2S_PORT);

  WiFi.begin(ssid, password);
  Serial.print("连接到WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi连接成功");
}

void loop() {
  WiFiClient client;
  if (!client.connect(serverAddress, serverPort)) {
    Serial.println("连接到服务器失败");
    delay(3000);
    return;
  }

  Serial.println("已连接到服务器");
  i2s_setpin();
  size_t bytesIn = 0;
  esp_err_t result = i2s_read(I2S_PORT, &sBuffer, bufferLen, &bytesIn, portMAX_DELAY);
  if (result == ESP_OK) {
    int samples_read = bytesIn / sizeof(int16_t);
    if (samples_read > 0) {
      Serial.println("发送消息到服务器...");
      client.println("Mystic Light Quest");
      Serial.println("Mystic Light Quest");

      for (int i = 0; i < samples_read; i++) {
        client.print(sBuffer[i]);
        client.print(" ");
        Serial.print(sBuffer[i]);
        Serial.print(" ");
      }
      Serial.println("\n消息发送完毕。");

      Serial.print("播放...\n");
      i2s_setpin2();
      esp_err_t oresult = i2s_write(I2S_PORT, &sBuffer, bufferLen, &bytesIn, portMAX_DELAY);
      if (oresult != ESP_OK) {
        Serial.printf("写入音频数据失败: %s\n", esp_err_to_name(oresult));
      }
    }
  } else {
    Serial.printf("读取音频数据失败: %s\n", esp_err_to_name(result));
  }

  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
      Serial.write(c);
    }
  }

  client.stop();
  Serial.println("与服务器断开连接");
  delay(5000); // 等待后再重新连接或进行其他操作
}
